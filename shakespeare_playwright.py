# -*- coding: utf-8 -*-
"""Shakespeare Playwright.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OCuWlZTcOLHhXB2UCJUAY4SB1DdT8e61
"""

import warnings
import os
import tensorflow as tf
import numpy as np

warnings.filterwarnings('ignore')

path = tf.keras.utils.get_file('shakespeare.txt',
                                       'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')
text = open(path, 'rb').read().decode(encoding='utf-8')

print("Length of text {} characters" .format(len(text)))
print(text[:250])

vocab = sorted(set(text))
print('{} unique characters'.format(len(vocab)))

char2idx = {u:idx for idx, u in enumerate(vocab)}
idx2char = np.array(vocab)
textAsInt = np.array([char2idx[char] for char in text])

print("{")
for char, _ in zip(char2idx, range(20)):
    print("    {:4s}: {:3d}".format(repr(char), char2idx[char]))
print("}\n....\n")

print('{}  ------> characters mapped to int -----> {}'.format(repr(text[:13]),
                                                             textAsInt[:13]))

"""# Readying Data"""

seqLength = 100
examplesPerEpoch = len(text) // (seqLength + 1)

charDataset = tf.data.Dataset.from_tensor_slices(textAsInt)

for i in charDataset.take(5):
    print(idx2char[i.numpy()])

sequences = charDataset.batch(seqLength + 1, drop_remainder=True)

for item in sequences.take(5):
    print(repr("".join(idx2char[item.numpy()])))

def splitInputTarget(chunk):
    inputText = chunk[:-1]
    targetText = chunk[1:]
    return inputText, targetText

dataset = sequences.map(splitInputTarget)

for inputEx, targetEx in dataset.take(1):
    print("Input data: ", repr("".join(idx2char[inputEx.numpy()])))
    print("Target data: ", repr("".join(idx2char[targetEx.numpy()])))

for i, (inputIdx, targetIdx) in enumerate(zip(inputEx[:5], targetEx[:5])):
    print("step {:4d}".format(i))
    print("  input {} ({:s})".format(inputIdx, repr(idx2char[inputIdx])))
    print("  expected output {} ({:s})".format(targetIdx, repr(idx2char[targetIdx])))

"""Creating Training Sets"""

batchSize = 64
bufSize = 10000

dataset = dataset.shuffle(bufSize).batch(batchSize, drop_remainder=True)

print(dataset)

vocabSize = len(vocab)
embeddingDim = 256
rnnUnits = 1024

"""# BUILDING MODEL"""

def buildModel(vocabSize, embeddingDim, rnnUnits, batchSize):
    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(vocabSize, embeddingDim, batch_input_shape=[batchSize, None]),
        tf.keras.layers.GRU(rnnUnits, return_sequences=True, stateful=True,
                           recurrent_initializer="glorot_uniform"),
        tf.keras.layers.Dense(vocabSize)
    ])
    
    return model

model = buildModel(vocabSize=len(vocab), embeddingDim =embeddingDim, rnnUnits=rnnUnits, batchSize=batchSize)

for input_example_batch, target_example_batch in dataset.take(1):
  example_batch_predictions = model(input_example_batch)
  print(example_batch_predictions.shape, "# (batch_size, sequence_length, vocab_size)")

model.summary()

sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)
sampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()
print(sampled_indices)

print("Input: \n", repr("".join(idx2char[input_example_batch[0]])))
print()
print("Next Char Predictions: \n", repr("".join(idx2char[sampled_indices ])))

def loss(labels, logits):
    return tf.keras.losses.sparse_categorical_crossentropy(labels, 
                                                           logits, 
                                                           from_logits=True)

example_batch_loss  = loss(target_example_batch, example_batch_predictions)
print("Prediction shape: ", example_batch_predictions.shape, " # (batch_size, sequence_length, vocab_size)")
print("scalar_loss:      ", example_batch_loss.numpy().mean())

"""# TRAINING MODEL"""

model.compile(optimizer="adam", loss=loss)

# Directory where the checkpoints will be saved
checkpoint_dir = './training_checkpoints'
# Name of the checkpoint files
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

checkpoint_callback=tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True)

EPOCHS = 100

history = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])

"""# PREDICTION"""

model = buildModel(vocabSize, embeddingDim, rnnUnits, batchSize=1)
model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
model.build(tf.TensorShape([1, None]))
model.summary()

def generateText(model, startString):
    numGen = 500
    inputEval = [char2idx[s] for s in startString]
    inputEval = tf.expand_dims(inputEval, 0)
    
    textGen = []
    temperature = 1
    
    model.reset_states()
    
    for i in range(numGen):
        predictions = model(inputEval)
        predictions = tf.squeeze(predictions, 0)
        predictions /= temperature
        predictedId = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()
        
        inputEval = tf.expand_dims([predictedId], 0)
        textGen.append(idx2char[predictedId])
        
    return (startString + "".join(textGen))

print(generateText(model, startString ="ROMEO: "))

